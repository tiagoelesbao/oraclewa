import axios from 'axios';

const EVOLUTION_URL = 'http://128.140.7.154:8080';
const EVOLUTION_KEY = 'Imperio2024@EvolutionSecure';

console.log('\nüîß === CORRIGINDO ERRO "N√ÉO FOI POSS√çVEL CONECTAR O DISPOSITIVO" ===\n');

async function fixDeviceConnection() {
  // Inst√¢ncias para corrigir
  const instancesToFix = ['imperio-webhook-2', 'imperio-webhook-3', 'imperio-webhook-4'];
  
  for (const instanceName of instancesToFix) {
    console.log(`\nüì± Processando ${instanceName}...`);
    
    try {
      // 1. Verificar configura√ß√µes atuais
      console.log('   üîç Verificando configura√ß√µes atuais...');
      
      const settingsResponse = await axios.get(
        `${EVOLUTION_URL}/settings/find/${instanceName}`,
        {
          headers: { 'apikey': EVOLUTION_KEY },
          timeout: 10000
        }
      );
      
      console.log('   ‚úÖ Configura√ß√µes atuais obtidas');
      
      // 2. Atualizar configura√ß√µes para melhor compatibilidade
      console.log('   ‚öôÔ∏è Atualizando configura√ß√µes...');
      
      const newSettings = {
        rejectCall: false,
        msgCall: "",
        groupsIgnore: false,
        alwaysOnline: false,
        readMessages: false,
        readStatus: false,
        syncFullHistory: false
      };
      
      await axios.post(
        `${EVOLUTION_URL}/settings/set/${instanceName}`,
        newSettings,
        {
          headers: {
            'apikey': EVOLUTION_KEY,
            'Content-Type': 'application/json'
          },
          timeout: 10000
        }
      );
      
      console.log('   ‚úÖ Configura√ß√µes atualizadas');
      
      // 3. Aguardar um momento
      console.log('   ‚è≥ Aguardando 2 segundos...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // 4. For√ßar reconex√£o/reiniciar inst√¢ncia
      console.log('   üîÑ Reiniciando inst√¢ncia...');
      
      try {
        await axios.post(
          `${EVOLUTION_URL}/instance/restart/${instanceName}`,
          {},
          {
            headers: {
              'apikey': EVOLUTION_KEY,
              'Content-Type': 'application/json'
            },
            timeout: 10000
          }
        );
        
        console.log('   ‚úÖ Inst√¢ncia reiniciada');
        
        // Aguardar reinicializa√ß√£o
        await new Promise(resolve => setTimeout(resolve, 3000));
        
      } catch (error) {
        console.log('   ‚è≠Ô∏è Restart n√£o dispon√≠vel, continuando...');
      }
      
      // 5. Gerar novo QR Code
      console.log('   üì± Gerando novo QR Code...');
      
      const qrResponse = await axios.get(
        `${EVOLUTION_URL}/instance/connect/${instanceName}`,
        {
          headers: { 'apikey': EVOLUTION_KEY },
          timeout: 15000
        }
      );
      
      if (qrResponse.data?.qrcode) {
        console.log('   ‚úÖ QR Code gerado com sucesso!');
        console.log(`   üì± Status: ${qrResponse.data.status || 'connecting'}`);
        
        // Mostrar primeiros caracteres do QR para verificar
        if (qrResponse.data.qrcode.code) {
          console.log(`   üîó QR Code v√°lido (${qrResponse.data.qrcode.code.length} chars)`);
        }
      } else {
        console.log('   ‚ö†Ô∏è QR Code em formato diferente');
      }
      
      console.log(`   ‚úÖ ${instanceName} pronta para conex√£o!`);
      
    } catch (error) {
      console.error(`   ‚ùå Erro ao processar ${instanceName}:`, error.message);
      
      if (error.code === 'ECONNREFUSED') {
        console.log('   ‚ö†Ô∏è Evolution API n√£o est√° acess√≠vel');
        console.log('   üí° Verifique se o servidor est√° online');
      } else if (error.response?.status === 404) {
        console.log('   ‚ö†Ô∏è Inst√¢ncia n√£o encontrada, pode ter sido deletada');
        console.log('   üí° Execute o script de recria√ß√£o novamente');
      }
    }
  }
  
  console.log('\nüìã === INSTRU√á√ïES ESPEC√çFICAS PARA RESOLVER O ERRO ===\n');
  console.log('üîß CAUSAS COMUNS DO ERRO "N√£o foi poss√≠vel conectar o dispositivo":');
  console.log('');
  console.log('1. üì± PROBLEMA NO CELULAR:');
  console.log('   - Use WhatsApp OFICIAL (n√£o Business/GB WhatsApp)');
  console.log('   - Feche completamente o WhatsApp antes de escanear');
  console.log('   - Certifique-se que o celular tem internet est√°vel');
  console.log('   - Desative WiFi e use apenas dados m√≥veis');
  console.log('');
  console.log('2. üîó PROBLEMA NO QR CODE:');
  console.log('   - QR Code expira em 60 segundos');
  console.log('   - Clique em "Atualizar" se demorar mais de 30s');
  console.log('   - Escaneie rapidamente ap√≥s o QR aparecer');
  console.log('');
  console.log('3. üì∂ PROBLEMA DE REDE:');
  console.log('   - Servidor Evolution API deve estar online');
  console.log('   - Verifique conex√£o com a internet');
  console.log('   - Tente em hor√°rios diferentes (menor tr√°fego)');
  console.log('');
  console.log('4. üîÑ PROBLEMA DE SESS√ÉO:');
  console.log('   - Se o n√∫mero j√° foi usado antes, aguarde 24h');
  console.log('   - Ou use um n√∫mero completamente diferente');
  console.log('   - Logout do WhatsApp Web em outros lugares');
  console.log('');
  console.log('üì± PASSOS PARA CONECTAR:');
  console.log('1. Acesse: http://localhost:3001/instances');
  console.log('2. Clique em "Conectar" na inst√¢ncia');
  console.log('3. Abra WhatsApp no celular');
  console.log('4. V√° em Menu > Aparelhos conectados');
  console.log('5. Toque em "Conectar um aparelho"');
  console.log('6. Escaneie o QR Code RAPIDAMENTE');
  console.log('7. Aguarde mensagem "Conectado com sucesso"');
  console.log('');
  console.log('‚ö° DICA AVAN√áADA:');
  console.log('Se persistir o erro, tente:');
  console.log('- Usar dados m√≥veis ao inv√©s de WiFi');
  console.log('- Reiniciar o celular');
  console.log('- Limpar cache do WhatsApp');
  console.log('- Usar outro n√∫mero se dispon√≠vel');
  console.log('');
  console.log('‚úÖ As inst√¢ncias foram configuradas com settings otimizados!');
}

// Executar
fixDeviceConnection().catch(console.error);