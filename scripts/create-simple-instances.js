import axios from 'axios';

const EVOLUTION_URL = 'http://128.140.7.154:8080';
const EVOLUTION_KEY = 'Imperio2024@EvolutionSecure';

console.log('\nüî® === CRIANDO INST√ÇNCIAS COM PAYLOAD M√çNIMO ===\n');

async function createSimpleInstances() {
  const instances = [
    { name: 'imperio-webhook-3' },
    { name: 'imperio-webhook-4' }
  ];
  
  for (const instance of instances) {
    console.log(`\nüì± Criando ${instance.name}...`);
    
    try {
      // Payload absolutamente m√≠nimo
      const minimalPayload = {
        instanceName: instance.name,
        integration: 'WHATSAPP-BAILEYS'
      };
      
      console.log('   üîß Usando payload m√≠nimo:', JSON.stringify(minimalPayload));
      
      const response = await axios.post(
        `${EVOLUTION_URL}/instance/create`,
        minimalPayload,
        {
          headers: {
            'apikey': EVOLUTION_KEY,
            'Content-Type': 'application/json'
          },
          timeout: 15000
        }
      );
      
      console.log('   ‚úÖ Inst√¢ncia criada com sucesso!');
      console.log('   üìä Resposta:', response.data);
      
      // Aguardar um pouco antes da pr√≥xima
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Configurar webhook
      console.log('   üîó Configurando webhook...');
      try {
        await axios.post(
          `${EVOLUTION_URL}/webhook/set/${instance.name}`,
          {
            webhook: 'http://localhost:3333/webhook/imperio/messages',
            events: ['messages.upsert'],
            webhook_by_events: false
          },
          {
            headers: {
              'apikey': EVOLUTION_KEY,
              'Content-Type': 'application/json'
            }
          }
        );
        console.log('   ‚úÖ Webhook configurado');
      } catch (webhookError) {
        console.log('   ‚ö†Ô∏è Erro no webhook, mas inst√¢ncia foi criada:', webhookError.message);
      }
      
      // Tentar gerar QR
      console.log('   üì± Tentando gerar QR...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      try {
        const qrResponse = await axios.get(
          `${EVOLUTION_URL}/instance/connect/${instance.name}`,
          {
            headers: { 'apikey': EVOLUTION_KEY }
          }
        );
        
        if (qrResponse.data) {
          console.log('   ‚úÖ QR dispon√≠vel!');
        }
      } catch (qrError) {
        console.log('   ‚ÑπÔ∏è QR ser√° gerado no frontend');
      }
      
    } catch (error) {
      console.error(`   ‚ùå Erro ao criar ${instance.name}:`, error.response?.data || error.message);
      
      // Tentar com payload ainda mais simples
      if (error.response?.status === 400) {
        console.log('   üîÑ Tentando com payload ultra-simples...');
        try {
          const ultraSimplePayload = {
            instanceName: instance.name
          };
          
          await axios.post(
            `${EVOLUTION_URL}/instance/create`,
            ultraSimplePayload,
            {
              headers: {
                'apikey': EVOLUTION_KEY,
                'Content-Type': 'application/json'
              }
            }
          );
          
          console.log('   ‚úÖ Criada com payload ultra-simples!');
        } catch (secondError) {
          console.log('   ‚ùå Falhou mesmo com payload ultra-simples:', secondError.message);
        }
      }
    }
  }
  
  console.log('\nüìã === STATUS FINAL ===\n');
  console.log('üéØ PR√ìXIMOS PASSOS PARA RESOLVER O ERRO:');
  console.log('');
  console.log('1. üì± PREPARA√á√ÉO DO CELULAR (CR√çTICO):');
  console.log('   ‚Ä¢ Feche completamente o WhatsApp');
  console.log('   ‚Ä¢ Desative WiFi, use APENAS dados m√≥veis');
  console.log('   ‚Ä¢ Reabra o WhatsApp');
  console.log('');
  console.log('2. üåê CONEX√ÉO:');
  console.log('   ‚Ä¢ Certifique-se de ter sinal 4G/5G forte');
  console.log('   ‚Ä¢ Se o sinal estiver fraco, mude de localiza√ß√£o');
  console.log('');
  console.log('3. ‚è±Ô∏è TIMING:');
  console.log('   ‚Ä¢ Tenha o celular PRONTO antes de gerar QR');
  console.log('   ‚Ä¢ Escaneie IMEDIATAMENTE (< 10 segundos)');
  console.log('   ‚Ä¢ Se demorar, clique em "Atualizar QR"');
  console.log('');
  console.log('4. üìû N√öMERO:');
  console.log('   ‚Ä¢ Use n√∫meros que NUNCA foram usados no WhatsApp Web');
  console.log('   ‚Ä¢ Ou aguarde 24-48h se j√° foram usados');
  console.log('');
  console.log('‚úÖ Acesse: http://localhost:3001/instances');
  console.log('üîÑ Clique em "Conectar" nas inst√¢ncias 3 e 4');
  console.log('üì± Siga EXATAMENTE o procedimento acima!');
}

// Executar
createSimpleInstances().catch(console.error);